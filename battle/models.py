"""
Battle app models
-------------------------
Classes for Battle app:
    - Enemy
    - GameFloorEnemy
    - CurrentGameFloor
    - Game
"""

from django.db import models
from django.conf import settings

from profiles.models import Player
# Create your models here.


class BaseClass(models.Model):
    """
    Model to keep classes ordered by primary key in the database.
    """
    class Meta:
        """
        order by primary key.
        """
        ordering = ['pk']
        abstract = True


class Enemy(BaseClass):
    """
    Model for creating enemys.
    -Determines if they are in the free version or full version.
    -Name
    -Images
    """
    in_freeversion = models.BooleanField(default=True)
    name = models.CharField(max_length=254)
    image_idle = models.ImageField(null=True, blank=True)
    image_attack = models.ImageField(null=True, blank=True)
    image_die = models.ImageField(null=True, blank=True)

    def __str__(self):
        return str(self.name)


class GameFloorEnemy(BaseClass):
    """
    Model for creating gamefloor enemys
    These are created for each gamefloor.
    And deleted when the gamefloor is finished.
    -Associated enemy.
    -Stats generated by the pickmonsters function.
    -Indicator for having attacked.
    """
    enemy = models.ForeignKey(
        Enemy, on_delete=models.CASCADE, null=True, blank=True)
    health_max = models.IntegerField(default=0)
    health_current = models.IntegerField(null=True)
    attack_power = models.IntegerField(default=0)
    skill_style = models.CharField(
        max_length=2,
        choices=settings.SKILL_STYLES,
        default=settings.SKILL_STYLES[0][0])
    attack_phase = models.CharField(
        max_length=1,
        choices=settings.ATTACK_PHASES,
        default=settings.ATTACK_PHASES[0][0])
    has_attacked = models.BooleanField(default=False)

    def __str__(self):
        return str(self.pk)


class CurrentGameFloor(BaseClass):
    """
    Model for creating a gamefloor.
    Holds gamefloor enemies.
    This is created for each new gamefloor.
    And deleted when the gamefloor is finished.
    -Associated GameFloorEnemies.
    -Phase to keep track of the gamestate.
    """
    date_time_created = models.DateTimeField(auto_now=True)
    current_phase = models.CharField(
        max_length=1,
        choices=settings.ATTACK_PHASES,
        default=settings.ATTACK_PHASES[0][0])
    enemy = models.ManyToManyField(GameFloorEnemy)

    def __str__(self):
        return str(self.pk)


class Game(BaseClass):
    """
    Model for creating a new game.
    Completed games are stored for highscores.
    -Associated player
    -Completed or not
    -Score
    -Gamestep (card draw/battle/discard/huberis)
    -Associated gameFloor
    -Counter for current level
    -Counter for levels played
    """

    date_time_created = models.DateTimeField(auto_now=True)
    player = models.ForeignKey(Player, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    score = models.BigIntegerField(default=0)
    game_step = models.CharField(
        max_length=1,
        choices=settings.GAME_STEPS,
        default=1)
    current_game_floor = models.ForeignKey(
        CurrentGameFloor,
        on_delete=models.SET_NULL,
        default=1,
        null=True,
        blank=True)
    current_game_floor_number = models.IntegerField(default=1)
    total_gamefloors_played = models.IntegerField(default=0)

    def __str__(self):
        return str(self.pk)
